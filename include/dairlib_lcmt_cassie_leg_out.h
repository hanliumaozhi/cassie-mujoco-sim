// THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
// BY HAND!!
//
// Generated by lcm-gen

#ifndef _dairlib_lcmt_cassie_leg_out_h
#define _dairlib_lcmt_cassie_leg_out_h

#include <stdint.h>
#include <stdlib.h>
#include <lcm/lcm_coretypes.h>
#include <lcm/lcm.h>

#ifdef __cplusplus
extern "C" {
#endif

#include "dairlib_lcmt_elmo_out.h"
#include "dairlib_lcmt_elmo_out.h"
#include "dairlib_lcmt_elmo_out.h"
#include "dairlib_lcmt_elmo_out.h"
#include "dairlib_lcmt_elmo_out.h"
#include "dairlib_lcmt_cassie_joint_out.h"
#include "dairlib_lcmt_cassie_joint_out.h"
#include "dairlib_lcmt_cassie_joint_out.h"
typedef struct _dairlib_lcmt_cassie_leg_out dairlib_lcmt_cassie_leg_out;
struct _dairlib_lcmt_cassie_leg_out
{
    dairlib_lcmt_elmo_out hipRollDrive;
    dairlib_lcmt_elmo_out hipYawDrive;
    dairlib_lcmt_elmo_out hipPitchDrive;
    dairlib_lcmt_elmo_out kneeDrive;
    dairlib_lcmt_elmo_out footDrive;
    dairlib_lcmt_cassie_joint_out shinJoint;
    dairlib_lcmt_cassie_joint_out tarsusJoint;
    dairlib_lcmt_cassie_joint_out footJoint;
    int8_t     medullaCounter;
    int16_t    medullaCpuLoad;
    int8_t     reedSwitchState;
};

/**
 * Create a deep copy of a dairlib_lcmt_cassie_leg_out.
 * When no longer needed, destroy it with dairlib_lcmt_cassie_leg_out_destroy()
 */
dairlib_lcmt_cassie_leg_out* dairlib_lcmt_cassie_leg_out_copy(const dairlib_lcmt_cassie_leg_out* to_copy);

/**
 * Destroy an instance of dairlib_lcmt_cassie_leg_out created by dairlib_lcmt_cassie_leg_out_copy()
 */
void dairlib_lcmt_cassie_leg_out_destroy(dairlib_lcmt_cassie_leg_out* to_destroy);

/**
 * Identifies a single subscription.  This is an opaque data type.
 */
typedef struct _dairlib_lcmt_cassie_leg_out_subscription_t dairlib_lcmt_cassie_leg_out_subscription_t;

/**
 * Prototype for a callback function invoked when a message of type
 * dairlib_lcmt_cassie_leg_out is received.
 */
typedef void(*dairlib_lcmt_cassie_leg_out_handler_t)(
    const lcm_recv_buf_t *rbuf, const char *channel,
    const dairlib_lcmt_cassie_leg_out *msg, void *userdata);

/**
 * Publish a message of type dairlib_lcmt_cassie_leg_out using LCM.
 *
 * @param lcm The LCM instance to publish with.
 * @param channel The channel to publish on.
 * @param msg The message to publish.
 * @return 0 on success, <0 on error.  Success means LCM has transferred
 * responsibility of the message data to the OS.
 */
int dairlib_lcmt_cassie_leg_out_publish(lcm_t *lcm, const char *channel, const dairlib_lcmt_cassie_leg_out *msg);

/**
 * Subscribe to messages of type dairlib_lcmt_cassie_leg_out using LCM.
 *
 * @param lcm The LCM instance to subscribe with.
 * @param channel The channel to subscribe to.
 * @param handler The callback function invoked by LCM when a message is
 *     received. This function is invoked by LCM during calls to lcm_handle()
 *     and lcm_handle_timeout().
 * @param userdata An opaque pointer passed to @p handler when it is invoked.
 * @return 0 on success, <0 if an error occured
 */
dairlib_lcmt_cassie_leg_out_subscription_t* dairlib_lcmt_cassie_leg_out_subscribe(
    lcm_t *lcm, const char *channel, dairlib_lcmt_cassie_leg_out_handler_t handler, void *userdata);

/**
 * Removes and destroys a subscription created by dairlib_lcmt_cassie_leg_out_subscribe()
 */
int dairlib_lcmt_cassie_leg_out_unsubscribe(lcm_t *lcm, dairlib_lcmt_cassie_leg_out_subscription_t* hid);

/**
 * Sets the queue capacity for a subscription.
 * Some LCM providers (e.g., the default multicast provider) are implemented
 * using a background receive thread that constantly revceives messages from
 * the network.  As these messages are received, they are buffered on
 * per-subscription queues until dispatched by lcm_handle().  This function
 * how many messages are queued before dropping messages.
 *
 * @param subs the subscription to modify.
 * @param num_messages The maximum number of messages to queue
 *  on the subscription.
 * @return 0 on success, <0 if an error occured
 */
int dairlib_lcmt_cassie_leg_out_subscription_set_queue_capacity(
    dairlib_lcmt_cassie_leg_out_subscription_t* subs, int num_messages);

/**
 * Encode a message of type dairlib_lcmt_cassie_leg_out into binary form.
 *
 * @param buf The output buffer.
 * @param offset Encoding starts at this byte offset into @p buf.
 * @param maxlen Maximum number of bytes to write.  This should generally
 *               be equal to dairlib_lcmt_cassie_leg_out_encoded_size().
 * @param msg The message to encode.
 * @return The number of bytes encoded, or <0 if an error occured.
 */
int dairlib_lcmt_cassie_leg_out_encode(void *buf, int offset, int maxlen, const dairlib_lcmt_cassie_leg_out *p);

/**
 * Decode a message of type dairlib_lcmt_cassie_leg_out from binary form.
 * When decoding messages containing strings or variable-length arrays, this
 * function may allocate memory.  When finished with the decoded message,
 * release allocated resources with dairlib_lcmt_cassie_leg_out_decode_cleanup().
 *
 * @param buf The buffer containing the encoded message
 * @param offset The byte offset into @p buf where the encoded message starts.
 * @param maxlen The maximum number of bytes to read while decoding.
 * @param msg Output parameter where the decoded message is stored
 * @return The number of bytes decoded, or <0 if an error occured.
 */
int dairlib_lcmt_cassie_leg_out_decode(const void *buf, int offset, int maxlen, dairlib_lcmt_cassie_leg_out *msg);

/**
 * Release resources allocated by dairlib_lcmt_cassie_leg_out_decode()
 * @return 0
 */
int dairlib_lcmt_cassie_leg_out_decode_cleanup(dairlib_lcmt_cassie_leg_out *p);

/**
 * Check how many bytes are required to encode a message of type dairlib_lcmt_cassie_leg_out
 */
int dairlib_lcmt_cassie_leg_out_encoded_size(const dairlib_lcmt_cassie_leg_out *p);

// LCM support functions. Users should not call these
int64_t __dairlib_lcmt_cassie_leg_out_get_hash(void);
uint64_t __dairlib_lcmt_cassie_leg_out_hash_recursive(const __lcm_hash_ptr *p);
int __dairlib_lcmt_cassie_leg_out_encode_array(
    void *buf, int offset, int maxlen, const dairlib_lcmt_cassie_leg_out *p, int elements);
int __dairlib_lcmt_cassie_leg_out_decode_array(
    const void *buf, int offset, int maxlen, dairlib_lcmt_cassie_leg_out *p, int elements);
int __dairlib_lcmt_cassie_leg_out_decode_array_cleanup(dairlib_lcmt_cassie_leg_out *p, int elements);
int __dairlib_lcmt_cassie_leg_out_encoded_array_size(const dairlib_lcmt_cassie_leg_out *p, int elements);
int __dairlib_lcmt_cassie_leg_out_clone_array(const dairlib_lcmt_cassie_leg_out *p, dairlib_lcmt_cassie_leg_out *q, int elements);

#ifdef __cplusplus
}
#endif

#endif
